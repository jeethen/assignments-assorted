(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var renderer_1 = require("./ts/renderer");
(function testing() {
    var rend = new renderer_1.renderer();
    rend.init();
}());

},{"./ts/renderer":5}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Component = /** @class */ (function () {
    function Component() {
        console.log('Component Class');
    }
    Component.prototype.configData = function () {
        return {
            "Rent": {
                "type": "num",
                "min": 1,
                "max": 10000,
                "unit": "$"
            },
            "Age": {
                "type": "num",
                "min": 10,
                "max": 60,
                "unit": "years"
            },
            "Zip_Code": {
                "type": "text",
                "condition": "",
                "unit": ""
            },
            "Order_Type": {
                "type": "list",
                "options": [
                    "TV",
                    "Beds",
                    "Dining Table",
                    "Sofa"
                ],
                "unit": ""
            },
            "Tenure": {
                "type": "num",
                "min": 1,
                "max": 12,
                "unit": "month/s"
            }
        };
    };
    Component.prototype.operands = function () {
        return {
            "arithemticops": [
                "Less Than",
                "More Than",
                "Equals",
                "Contains",
                "Less or Equal",
                "More or Equal"
            ],
            "logicalOps": [
                "And"
            ]
        };
    };
    return Component;
}());
exports.Component = Component;

},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var validator_1 = require("./validator");
var httpHelper_1 = require("./httpHelper");
var formUtils = /** @class */ (function () {
    function formUtils(form) {
        this.validator = new validator_1.Validator();
        this.form = form;
    }
    formUtils.prototype.formbind = function () {
        var _this = this;
        this.form.addEventListener('focusout', function (e) {
            var tartgetEl = e.target;
            if (e.target.type === 'text') {
                _this.elementValidate(tartgetEl);
            }
        });
        this.form.addEventListener('click', function (e) {
            if (e.target.type === 'button') {
                e.preventDefault();
                e.stopImmediatePropagation();
                if (_this.formValidate()) {
                    _this.formSubmit();
                }
                return false;
            }
        });
    };
    formUtils.prototype.formSubmit = function () {
        var _this = this;
        var elements = this.form.elements;
        var rc = 1;
        for (var index in elements) {
            var element = elements[index];
            if (element.type === 'text') {
                var id1 = element.id;
                var selEl = document.getElementById(id1.slice(0, 6) + 1);
                var conftype = selEl.options[selEl.selectedIndex].text;
                var selEl2 = document.getElementById(id1.slice(0, 6) + 2);
                var operand = selEl2.options[selEl2.selectedIndex].text;
                var conf = {
                    'config': conftype,
                    'operand': operand,
                    'value': element.value,
                    'nextLogical': 'And'
                };
                this.payload['rule' + rc++] = conf;
            }
        }
        var url = 'http://www.mocky.io/v2/5df60e3a3400002900e5a4ff';
        httpHelper_1.httpHelper.httpCall('POST', url, this.payload, function (responseText) {
            var spanEl = document.getElementById('rulemsg');
            if (responseText.status === 'success') {
                spanEl.textContent = "Rules successfully created";
                _this.form.reset();
            }
            else {
                //Error handling based on errocases
                spanEl.textContent = responseText.errormsg;
            }
            setTimeout(function () {
                spanEl.textContent = '';
            }, 3000);
        });
    };
    formUtils.prototype.formValidate = function () {
        var elements = this.form.elements;
        this.payload = {};
        this.form.reset;
        var rc = 1;
        for (var index in elements) {
            var element = elements[index];
            if (element.type === 'text') {
                var ret = this.elementValidate(element);
                if (!ret) {
                    return false;
                }
            }
        }
        return true;
    };
    formUtils.prototype.elementValidate = function (el) {
        var id1 = el.id;
        var selEl = document.getElementById(id1.slice(0, 6) + 1);
        var conftype = selEl.options[selEl.selectedIndex].text;
        var errorHolder = document.getElementById(id1).nextSibling.nextSibling;
        errorHolder.textContent = '';
        var ret;
        ret = this.validator.validate(conftype, el.value);
        if (ret.status === false) {
            this.formerror(el, ret.errormsg);
            return false;
        }
        return true;
    };
    formUtils.prototype.formerror = function (tartgetEl, errormsg) {
        var errorHolder = document.getElementById(tartgetEl.id).nextSibling.nextSibling;
        errorHolder.textContent = errormsg;
    };
    return formUtils;
}());
exports.formUtils = formUtils;

},{"./httpHelper":4,"./validator":6}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var httpHelper = /** @class */ (function () {
    function httpHelper() {
    }
    httpHelper.httpCall = function (method, url, data, callback) {
        var xhr = new XMLHttpRequest();
        xhr.withCredentials = true;
        xhr.open(method, url, true);
        if (callback)
            xhr.onload = function () { callback(JSON.parse(this['responseText'])); };
        if (data != null) {
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.send(JSON.stringify(data));
        }
        else
            xhr.send();
    };
    return httpHelper;
}());
exports.httpHelper = httpHelper;

},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var component_1 = require("./component");
var formUtils_1 = require("./formUtils");
var renderer = /** @class */ (function () {
    function renderer() {
        this.config = [];
        this.ops = [];
        this.logicalOps = [];
        this.srCount = 0;
        this.configdata = {};
        this.component = new component_1.Component();
        this.formutils = new formUtils_1.formUtils(document.querySelector('form#ruleform'));
    }
    renderer.prototype.init = function () {
        this.getData();
        this.bind();
        this.addSubRules(true);
        this.formutils.formbind();
    };
    renderer.prototype.bind = function () {
        var _this = this;
        // Handles the new rule creation
        var addButton = document.getElementById('addSubrule');
        addButton.addEventListener("click", function (e) {
            if (_this.srCount > 4) {
                document.getElementById('deny-rules').removeAttribute('class');
                setTimeout(function () {
                    document.getElementById('deny-rules').setAttribute('class', 'hide');
                }, 3000);
            }
            else
                _this.addSubRules();
        });
    };
    renderer.prototype.addSubRules = function (defaultrule) {
        var _this = this;
        if (defaultrule === void 0) { defaultrule = false; }
        var sdiv = document.createElement('div');
        var id = 'sub_' + this.srCount;
        sdiv.setAttribute('id', id);
        sdiv.setAttribute('class', 'subrule');
        sdiv.appendChild(this.createSelect(this.config, id + '_1'));
        sdiv.appendChild(this.createSelect(this.ops, id + '_2'));
        var inputEl = document.createElement('input');
        inputEl.setAttribute('id', id + '_3');
        inputEl.setAttribute('class', 'rule-data');
        sdiv.appendChild(inputEl);
        var unitEl = document.createElement('span');
        unitEl.setAttribute('class', 'units');
        unitEl.textContent = '$';
        sdiv.appendChild(unitEl);
        var errorHolder = document.createElement('span');
        errorHolder.textContent = '';
        errorHolder.setAttribute('class', 'error-msg');
        sdiv.appendChild(errorHolder);
        if (!defaultrule) {
            var imgEl = document.createElement('img');
            imgEl.setAttribute('src', "./static/icons8-trash-can-26.png");
            imgEl.setAttribute('id', id + '_del');
            sdiv.appendChild(imgEl);
            imgEl.addEventListener('click', function () {
                sdiv.parentNode.removeChild(sdiv);
                _this.srCount--;
            });
        }
        var formdiv = document.getElementById('inputs');
        formdiv.appendChild(sdiv);
        this.bindSelect(id + '_1', unitEl);
        this.srCount++;
    };
    renderer.prototype.createSelect = function (options, id) {
        var sel = document.createElement('select');
        sel.setAttribute('id', id);
        for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
            var iterator = options_1[_i];
            var opt = document.createElement('option');
            opt.text = opt.value = iterator;
            sel.appendChild(opt);
        }
        return sel;
    };
    renderer.prototype.getData = function () {
        var inputs = this.component.configData();
        var operands = this.component.operands();
        this.configdata = inputs;
        for (var types in inputs) {
            this.config.push(types);
        }
        this.ops = operands.arithemticops;
        this.logicalOps = operands.logicalOps;
    };
    renderer.prototype.bindSelect = function (id, unitEl) {
        var _this = this;
        var selEl = document.getElementById(id);
        selEl.addEventListener('change', function () {
            var operand = selEl.options[selEl.selectedIndex].text;
            var dataset = _this.configdata[operand];
            unitEl.textContent = dataset.unit;
        });
    };
    renderer.prototype.addRule = function () {
        //Place holder method to create multiple New rules together
        //Not needed as per the requirement.
    };
    return renderer;
}());
exports.renderer = renderer;

},{"./component":2,"./formUtils":3}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var component_1 = require("./component");
var Validator = /** @class */ (function () {
    function Validator() {
        this.configdata = {};
        this.comp = new component_1.Component();
        this.configdata = this.comp.configData();
    }
    Validator.prototype.validate = function (name, value) {
        var dataset = this.configdata[name];
        var retval = {};
        if (this.isempty(value)) {
            return { "status": false, "errormsg": 'Please enter a non empty value' };
        }
        value = value.trim();
        switch (dataset.type) {
            case "num":
                retval = this.validate_range(dataset, parseInt(value));
                break;
            case "list":
                retval = this.validate_list(dataset, value.split(","));
                break;
            case "text":
                retval = this.validate_text(dataset, value);
                break;
            default:
                console.log('Broken out');
                retval = { "status": false, "errormsg": 'Unknown data type' };
                break;
        }
        return retval;
    };
    Validator.prototype.validate_range = function (dataset, value) {
        var status = true, errormsg = '';
        if (value <= 0) {
            errormsg = 'Provide a positive number';
            status = false;
        }
        else if (value > dataset.max || value < dataset.min) {
            errormsg = "Please provide value in the range of " + dataset.min + " and  " + dataset.max;
            status = false;
        }
        return { "status": status, "errormsg": errormsg };
    };
    Validator.prototype.validate_text = function (dataset, list) {
        var regexp = new RegExp('\d{5}(,\s*\d{5})*');
        return regexp.test(list);
    };
    Validator.prototype.validate_list = function (dataset, list) {
        var status = true, errormsg = '';
        for (var value in list) {
            if (dataset.options.indexOf(value.trim()) === -1) {
                errormsg = "The element " + value + " is not valid";
                status = false;
            }
        }
        return { "status": status, "errormsg": errormsg };
    };
    Validator.prototype.isempty = function (value) {
        if (typeof (value) === undefined || value === undefined || value === '') {
            return true;
        }
    };
    return Validator;
}());
exports.Validator = Validator;

},{"./component":2}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
